#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.
–°—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ –∑ —Ä—ñ–∑–Ω–∏–º –≤–º—ñ—Å—Ç–æ–º –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ—à—É–∫—É.
"""

import os
import random
import string
from pathlib import Path
from typing import List, Dict

class FileGenerator:
    """–ö–ª–∞—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    
    def __init__(self, output_dir: str = "test_files"):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ñ–∞–π–ª—ñ–≤
        
        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        """
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        # –ù–∞–±—ñ—Ä –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —É —Ñ–∞–π–ª–∏
        self.keywords = [
            "python", "programming", "algorithm", "data", "structure",
            "function", "variable", "loop", "condition", "class",
            "object", "method", "string", "integer", "boolean",
            "list", "dictionary", "tuple", "set", "module",
            "package", "import", "exception", "error", "debug",
            "test", "development", "software", "computer", "technology"
        ]
        
        # –ó–≤–∏—á–∞–π–Ω—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        self.common_words = [
            "the", "be", "to", "of", "and", "a", "in", "that", "have",
            "i", "it", "for", "not", "on", "with", "he", "as", "you",
            "do", "at", "this", "but", "his", "by", "from", "they",
            "we", "say", "her", "she", "or", "an", "will", "my",
            "one", "all", "would", "there", "their", "what", "so",
            "up", "out", "if", "about", "who", "get", "which", "go", "me"
        ]
    
    def generate_random_text(self, word_count: int) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏
        
        Args:
            word_count: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ —É —Ç–µ–∫—Å—Ç—ñ
            
        Returns:
            –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
        """
        words = []
        for _ in range(word_count):
            if random.random() < 0.1:  # 10% —à–∞–Ω—Å –≤—Å—Ç–∞–≤–∏—Ç–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
                words.append(random.choice(self.keywords))
            else:
                words.append(random.choice(self.common_words))
        
        return " ".join(words)
    
    def generate_file(self, filename: str, word_count: int = 1000, 
                     target_keywords: List[str] = None) -> None:
        """
        –ì–µ–Ω–µ—Ä—É—î –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
        
        Args:
            filename: –Ü–º'—è —Ñ–∞–π–ª—É
            word_count: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ —É —Ñ–∞–π–ª—ñ
            target_keywords: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—è
        """
        filepath = self.output_dir / filename
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
        text = self.generate_random_text(word_count)
        
        # –î–æ–¥–∞—î–º–æ —Ü—ñ–ª—å–æ–≤—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω—ñ
        if target_keywords:
            for keyword in target_keywords:
                # –í—Å—Ç–∞–≤–ª—è—î–º–æ –∫–æ–∂–Ω–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤
                for _ in range(random.randint(2, 8)):
                    text += f" {keyword}"
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç —É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∏
        words = text.split()
        paragraphs = []
        
        i = 0
        while i < len(words):
            paragraph_length = random.randint(50, 150)
            paragraph = " ".join(words[i:i + paragraph_length])
            paragraphs.append(paragraph)
            i += paragraph_length
        
        formatted_text = "\n\n".join(paragraphs)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(formatted_text)
        
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª: {filename} ({len(words)} —Å–ª—ñ–≤)")
    
    def generate_test_files(self, num_files: int = 20, 
                          keywords_to_distribute: List[str] = None) -> Dict[str, List[str]]:
        """
        –ì–µ–Ω–µ—Ä—É—î –Ω–∞–±—ñ—Ä —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        
        Args:
            num_files: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
            keywords_to_distribute: –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø–æ —Ñ–∞–π–ª–∞—Ö
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ä–æ–∑–ø–æ–¥—ñ–ª –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
        """
        print(f"üîß –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è {num_files} —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
        
        if keywords_to_distribute is None:
            keywords_to_distribute = ["python", "algorithm", "data", "function", "programming"]
        
        keyword_distribution = {keyword: [] for keyword in keywords_to_distribute}
        
        for i in range(1, num_files + 1):
            filename = f"file_{i:03d}.txt"
            
            # –í–∏–ø–∞–¥–∫–æ–≤–æ –æ–±–∏—Ä–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
            word_count = random.randint(500, 2000)
            
            # –í–∏–ø–∞–¥–∫–æ–≤–æ –æ–±–∏—Ä–∞—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É
            file_keywords = []
            for keyword in keywords_to_distribute:
                if random.random() < 0.6:  # 60% —à–∞–Ω—Å –≤–∫–ª—é—á–∏—Ç–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
                    file_keywords.append(keyword)
                    keyword_distribution[keyword].append(filename)
            
            self.generate_file(filename, word_count, file_keywords)
        
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {num_files} —Ñ–∞–π–ª—ñ–≤ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó {self.output_dir}")
        
        # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É
        print("\nüìä –†–æ–∑–ø–æ–¥—ñ–ª –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤:")
        for keyword, files in keyword_distribution.items():
            print(f"  {keyword}: {len(files)} —Ñ–∞–π–ª—ñ–≤ - {files[:5]}{'...' if len(files) > 5 else ''}")
        
        return keyword_distribution
    
    def clean_test_files(self) -> None:
        """–í–∏–¥–∞–ª—è—î –≤—Å—ñ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏"""
        if self.output_dir.exists():
            for file in self.output_dir.glob("*.txt"):
                file.unlink()
            print(f"üßπ –û—á–∏—â–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é {self.output_dir}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    generator = FileGenerator()
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ —Ñ–∞–π–ª–∏
    generator.clean_test_files()
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏
    keywords = ["python", "algorithm", "data", "function", "programming", 
                "structure", "variable", "loop", "class", "method"]
    
    distribution = generator.generate_test_files(
        num_files=30, 
        keywords_to_distribute=keywords
    )
    
    print(f"\nüéØ –ì–æ—Ç–æ–≤–æ! –¢–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –ø–æ—à—É–∫—É –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤:")
    print(f"   –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: {', '.join(keywords)}")
    print(f"   –§–∞–π–ª–∏: {generator.output_dir}/*.txt")

if __name__ == "__main__":
    main()
