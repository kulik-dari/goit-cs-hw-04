#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ç–∞ –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—ñ–≤
–¥–æ –ø–æ—à—É–∫—É –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —É —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª–∞—Ö.
"""

import time
import multiprocessing
from pathlib import Path
from typing import Dict, List
import statistics

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ –∫–ª–∞—Å–∏ –ø–æ—à—É–∫–∞—á—ñ–≤
from threading_search import ThreadingFileSearcher
from multiprocessing_search import MultiprocessingFileSearcher

class PerformanceBenchmark:
    """–ö–ª–∞—Å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    
    def __init__(self, test_directory: str = "test_files"):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–µ–Ω—á–º–∞—Ä–∫–∞
        
        Args:
            test_directory: –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
        """
        self.test_directory = test_directory
        self.keywords = ["python", "algorithm", "data", "function", "programming"]
        self.results = {}
    
    def run_threading_benchmark(self, num_threads_list: List[int], 
                               num_runs: int = 3) -> Dict[int, Dict[str, float]]:
        """
        –ë–µ–Ω—á–º–∞—Ä–∫ –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É –∑ —Ä—ñ–∑–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–æ—Ç–æ–∫—ñ–≤
        
        Args:
            num_threads_list: –°–ø–∏—Å–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ—Ç–æ–∫—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            num_runs: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—ñ–≤ –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–ø–æ—Ç–æ–∫—ñ–≤: {–º–µ—Ç—Ä–∏–∫–∞: –∑–Ω–∞—á–µ–Ω–Ω—è}}
        """
        print(f"üßµ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É...")
        threading_results = {}
        
        for num_threads in num_threads_list:
            print(f"\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ {num_threads} –ø–æ—Ç–æ–∫–∞–º–∏...")
            run_times = []
            
            for run in range(num_runs):
                print(f"   –ó–∞–ø—É—Å–∫ {run + 1}/{num_runs}")
                
                searcher = ThreadingFileSearcher(num_threads=num_threads)
                
                start_time = time.time()
                results = searcher.search_files(
                    directory=self.test_directory,
                    keywords=self.keywords
                )
                end_time = time.time()
                
                execution_time = end_time - start_time
                run_times.append(execution_time)
                
                print(f"      –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.2f}—Å")
            
            # –û–±—á–∏—Å–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            avg_time = statistics.mean(run_times)
            min_time = min(run_times)
            max_time = max(run_times)
            std_dev = statistics.stdev(run_times) if len(run_times) > 1 else 0
            
            threading_results[num_threads] = {
                'avg_time': avg_time,
                'min_time': min_time,
                'max_time': max_time,
                'std_dev': std_dev,
                'runs': run_times
            }
            
            print(f"   üìà –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {avg_time:.2f}—Å (¬±{std_dev:.2f})")
        
        return threading_results
    
    def run_multiprocessing_benchmark(self, num_processes_list: List[int], 
                                    num_runs: int = 3) -> Dict[int, Dict[str, float]]:
        """
        –ë–µ–Ω—á–º–∞—Ä–∫ –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É –∑ —Ä—ñ–∑–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø—Ä–æ—Ü–µ—Å—ñ–≤
        
        Args:
            num_processes_list: –°–ø–∏—Å–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–æ—Ü–µ—Å—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            num_runs: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—ñ–≤ –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–ø—Ä–æ—Ü–µ—Å—ñ–≤: {–º–µ—Ç—Ä–∏–∫–∞: –∑–Ω–∞—á–µ–Ω–Ω—è}}
        """
        print(f"‚öôÔ∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É...")
        multiprocessing_results = {}
        
        for num_processes in num_processes_list:
            print(f"\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ {num_processes} –ø—Ä–æ—Ü–µ—Å–∞–º–∏...")
            run_times = []
            
            for run in range(num_runs):
                print(f"   –ó–∞–ø—É—Å–∫ {run + 1}/{num_runs}")
                
                searcher = MultiprocessingFileSearcher(num_processes=num_processes)
                
                start_time = time.time()
                results = searcher.search_files(
                    directory=self.test_directory,
                    keywords=self.keywords
                )
                end_time = time.time()
                
                execution_time = end_time - start_time
                run_times.append(execution_time)
                
                print(f"      –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.2f}—Å")
            
            # –û–±—á–∏—Å–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            avg_time = statistics.mean(run_times)
            min_time = min(run_times)
            max_time = max(run_times)
            std_dev = statistics.stdev(run_times) if len(run_times) > 1 else 0
            
            multiprocessing_results[num_processes] = {
                'avg_time': avg_time,
                'min_time': min_time,
                'max_time': max_time,
                'std_dev': std_dev,
                'runs': run_times
            }
            
            print(f"   üìà –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {avg_time:.2f}—Å (¬±{std_dev:.2f})")
        
        return multiprocessing_results
    
    def run_sequential_benchmark(self, num_runs: int = 3) -> Dict[str, float]:
        """
        –ë–µ–Ω—á–º–∞—Ä–∫ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ (–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É) –ø—ñ–¥—Ö–æ–¥—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        
        Args:
            num_runs: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—ñ–≤ –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        print(f"üìù –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É (1 –ø–æ—Ç—ñ–∫)...")
        run_times = []
        
        for run in range(num_runs):
            print(f"   –ó–∞–ø—É—Å–∫ {run + 1}/{num_runs}")
            
            searcher = ThreadingFileSearcher(num_threads=1)
            
            start_time = time.time()
            results = searcher.search_files(
                directory=self.test_directory,
                keywords=self.keywords
            )
            end_time = time.time()
            
            execution_time = end_time - start_time
            run_times.append(execution_time)
            
            print(f"      –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.2f}—Å")
        
        # –û–±—á–∏—Å–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        avg_time = statistics.mean(run_times)
        min_time = min(run_times)
        max_time = max(run_times)
        std_dev = statistics.stdev(run_times) if len(run_times) > 1 else 0
        
        sequential_results = {
            'avg_time': avg_time,
            'min_time': min_time,
            'max_time': max_time,
            'std_dev': std_dev,
            'runs': run_times
        }
        
        print(f"   üìà –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {avg_time:.2f}—Å (¬±{std_dev:.2f})")
        return sequential_results
    
    def analyze_results(self, threading_results: Dict, multiprocessing_results: Dict, 
                       sequential_results: Dict) -> None:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤
        
        Args:
            threading_results: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É
            multiprocessing_results: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É
            sequential_results: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É
        """
        print(f"\n" + "="*80)
        print("üìä –ê–ù–ê–õ–Ü–ó –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü")
        print("="*80)
        
        sequential_time = sequential_results['avg_time']
        
        print(f"\nüìù –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ (–±–∞–∑–æ–≤–∏–π):")
        print(f"   –ß–∞—Å: {sequential_time:.2f}—Å (¬±{sequential_results['std_dev']:.2f})")
        
        print(f"\nüßµ –ë–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–∏–π –ø—ñ–¥—Ö—ñ–¥:")
        print(f"{'–ü–æ—Ç–æ–∫–∏':<8} {'–ß–∞—Å (—Å)':<10} {'–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è':<12} {'–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å':<12}")
        print("-" * 45)
        
        best_threading_time = float('inf')
        best_threading_threads = 1
        
        for threads, results in sorted(threading_results.items()):
            avg_time = results['avg_time']
            speedup = sequential_time / avg_time
            efficiency = speedup / threads * 100
            
            print(f"{threads:<8} {avg_time:<10.2f} {speedup:<12.2f} {efficiency:<12.1f}%")
            
            if avg_time < best_threading_time:
                best_threading_time = avg_time
                best_threading_threads = threads
        
        print(f"\n‚öôÔ∏è  –ë–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥:")
        print(f"{'–ü—Ä–æ—Ü–µ—Å–∏':<8} {'–ß–∞—Å (—Å)':<10} {'–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è':<12} {'–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å':<12}")
        print("-" * 45)
        
        best_multiprocessing_time = float('inf')
        best_multiprocessing_processes = 1
        
        for processes, results in sorted(multiprocessing_results.items()):
            avg_time = results['avg_time']
            speedup = sequential_time / avg_time
            efficiency = speedup / processes * 100
            
            print(f"{processes:<8} {avg_time:<10.2f} {speedup:<12.2f} {efficiency:<12.1f}%")
            
            if avg_time < best_multiprocessing_time:
                best_multiprocessing_time = avg_time
                best_multiprocessing_processes = processes
        
        print(f"\nüèÜ –ü–Ü–î–°–£–ú–û–ö:")
        print(f"   üìù –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥: {sequential_time:.2f}—Å")
        print(f"   üßµ –ö—Ä–∞—â–∏–π threading: {best_threading_time:.2f}—Å ({best_threading_threads} –ø–æ—Ç–æ–∫—ñ–≤)")
        print(f"   ‚öôÔ∏è  –ö—Ä–∞—â–∏–π multiprocessing: {best_multiprocessing_time:.2f}—Å ({best_multiprocessing_processes} –ø—Ä–æ—Ü–µ—Å—ñ–≤)")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
        if best_threading_time < best_multiprocessing_time:
            winner = "Threading"
            winner_time = best_threading_time
            loser_time = best_multiprocessing_time
        else:
            winner = "Multiprocessing"
            winner_time = best_multiprocessing_time
            loser_time = best_threading_time
        
        improvement = ((loser_time - winner_time) / loser_time) * 100
        
        print(f"\nüéØ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winner}")
        print(f"   –®–≤–∏–¥—à–µ –Ω–∞ {improvement:.1f}% –≤—ñ–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞")
        print(f"   –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ: {sequential_time/winner_time:.2f}x")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
    test_directory = "test_files"
    if not Path(test_directory).exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {test_directory} –Ω–µ —ñ—Å–Ω—É—î!")
        print("üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å file_generator.py –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤")
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    cpu_count = multiprocessing.cpu_count()
    threads_to_test = [1, 2, 4, cpu_count] if cpu_count > 4 else [1, 2, cpu_count]
    processes_to_test = [1, 2, 4, cpu_count] if cpu_count > 4 else [1, 2, cpu_count]
    num_runs = 3
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
    print(f"üìÅ –¢–µ—Å—Ç–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {test_directory}")
    print(f"üíª –î–æ—Å—Ç—É–ø–Ω–æ CPU: {cpu_count}")
    print(f"üîÑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—ñ–≤ –Ω–∞ —Ç–µ—Å—Ç: {num_runs}")
    print(f"üßµ –ü–æ—Ç–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {threads_to_test}")
    print(f"‚öôÔ∏è  –ü—Ä–æ—Ü–µ—Å–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {processes_to_test}")
    
    try:
        benchmark = PerformanceBenchmark(test_directory)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
        print(f"\nüèÅ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è...")
        
        # –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ (–±–∞–∑–æ–≤–∏–π)
        sequential_results = benchmark.run_sequential_benchmark(num_runs)
        
        # –ë–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–∏–π –ø—ñ–¥—Ö—ñ–¥
        threading_results = benchmark.run_threading_benchmark(threads_to_test, num_runs)
        
        # –ë–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
        multiprocessing_results = benchmark.run_multiprocessing_benchmark(processes_to_test, num_runs)
        
        # –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        benchmark.analyze_results(threading_results, multiprocessing_results, sequential_results)
        
        print(f"\n‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –±–µ–Ω—á–º–∞—Ä–∫—É: {e}")

if __name__ == "__main__":
    main()
